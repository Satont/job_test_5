version: '3.9'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    env_file:
      - .env.docker

  transactions:
    build:
      context: .
      dockerfile: Dockerfile
      target: transactions
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    env_file:
      - .env.docker

  seeding:
    build:
      context: .
      dockerfile: Dockerfile
      target: seeding
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    env_file:
      - .env.docker

  mark-processed:
    build:
      context: .
      dockerfile: Dockerfile
      target: mark-processed
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    env_file:
      - .env.docker

  migrations:
    image: migrate/migrate
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./db/migrations:/migrations
    env_file:
      - .env.docker
    command: "-path=/migrations/ -database postgres://test:test@postgres:5432/test?sslmode=disable up"

  postgres:
    image: postgres:15-alpine
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "test"
      POSTGRES_DB: "test"
      POSTGRES_PASSWORD: "test"
    ports:
      - "5651:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U test" ]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.11.7-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbit-data:/var/lib/rabbitmq/
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 5s
      timeout: 30s
      retries: 3

volumes:
  postgres-data:
  rabbit-data: